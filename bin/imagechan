#!/usr/bin/env ruby

require 'nokogiri'
require "fileutils"
require "open-uri"
require 'imagechan'
require "imagechan/version"
require "imagechan/catalog"

# Currently available commands
commands = %w{catalog version clearlock where}

#  Preparation
if not File.exists? Imagechan.dir
	Imagechan.prepare
end

if ARGV.size == 0
	puts <<-end
Usage: imagechan <command> [params]
Commands:
- <url>	: Download images from <url>
- version 	: Show current version
- clearlock 	: Clear LOCK file
end
exit(0)
else
	command = ARGV.first

	case command
	when "catalog"
		Imagechan::FourChan.catalog(ARGV[1])
	when "version"
		puts "Version #{Imagechan.version}"
	when "clearlock"
		Imagechan.clearlock
	when "where"
		Imagechan.where?
	else
		url = command
	end
	if commands.include? command
		exit(0)
	end
end

if not Imagechan.match_thread_url(url)
	puts "Error: Please put a valid 4chan thread URL!"
	exit(0)
end

category = url.scan(/([a-z]+)\/res/).first.first
thread_id = url.scan(/res\/([0-9]+)/).first.first
Dir.mkdir File.join(Imagechan.dir,category) if not File.exists? File.join(Imagechan.dir,category)

# Check if thread ID already downloaded!
if Imagechan.id_exists?(thread_id) == false
	print "Folder name: "
	dir_name = STDIN.gets.chomp.downcase.gsub(/[^a-zA-Z0-9\-\ ]/,"_").gsub(/_{2,}/,"_")
	target_dir_name = thread_id + ( dir_name.empty? ? "" : "_") + dir_name
	target_dir = File.join(Imagechan.dir,category,target_dir_name)
	Dir.mkdir(target_dir)
else
	puts "Folder with id #{thread_id} exist in #{Imagechan.get_folder_name_by_id(thread_id)}"
	print "Continue download (y/N)? "
	confirm = STDIN.gets.chomp.downcase
	exit(0) if confirm.empty? or confirm == "n"
	target_dir = File.join(Imagechan.dir,category,Imagechan.get_folder_name_by_id(thread_id))
end

# Locking download for small connection
if not File.exists?(File.join(Imagechan.dir,"LOCK"))
	File.open(File.join(Imagechan.dir,"LOCK"),'w'){|f| f.write ""}
else
	puts "There are currently other download process"
	exit(0)
end

# Let's the fun begin
html_file = open(url)
doc = Nokogiri::HTML(html_file)
images = doc.css("a.fileThumb")

puts "There are #{images.size} images"
puts "Saving images to #{target_dir}"

loop_number = 1
images.each do |image|
	img = "http:" + image.attr("href")
	image_filename = img[/[0-9]+\.(jpg|png|gif)/]
	print "#{loop_number}/#{images.size} "
	if File.exists?(File.join(target_dir,image_filename))
		puts "#{image_filename} exists, skipping..."
	else
		print "downloading #{image_filename}..."

		# Pure ruby download method
		File.open(File.join(target_dir,image_filename),"wb") do |save_file|
			open(img,"rb") do |read_file|
				save_file.write(read_file.read)
			end
		end
		puts " done!"
	end
	loop_number += 1
end

puts "Your images save in #{target_dir}"
File.delete(File.join(Imagechan.dir,"LOCK")) if File.exists? File.join(Imagechan.dir,"LOCK")
